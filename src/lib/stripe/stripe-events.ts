import Stripe from 'stripe'

import {
  getUserByEmailDao,
  updateUserSafeByUidDao,
} from '@/db/repositories/user-repository'
import {logger} from '@/lib/logger'
import {
  createSubscriptionFromStripeService,
  getBillingContext,
  getSubscriptionByUserIdService,
  updateSubscriptionForWebhookService,
} from '@/services/facades/subscription-service-facade'
import {createUserFromStripeService} from '@/services/facades/user-service-facade'
import {SubscriptionPlan} from '@/services/types/domain/subscription-types'

import {stripeClient} from './stripe-client'

export async function onStripeEvent(event: Stripe.Event) {
  logger.info('[STRIPE-EVENT] R√©ception √©v√©nement Stripe:', event.type)
  logger.debug('[STRIPE-EVENT] D√©tails √©v√©nement:', {
    eventId: event.id,
    eventData: event.data,
  })

  try {
    switch (event.type) {
      case 'customer.subscription.created': {
        logger.info('üîß Traitement customer.subscription.created')
        const subscription = event.data.object as Stripe.Subscription
        logger.info(
          'üîß Traitement customer.subscription.created subscription.id',
          subscription.id
        )
        break
      }
      case 'checkout.session.completed': {
        logger.info('üîß Traitement checkout session completed')
        const session = event.data.object as Stripe.Checkout.Session
        const isCustomCheckout = session.metadata?.source === 'custom_checkout'

        // Ici on traite le cas non couverts par better-auth

        // CAS : Checkout AS guest + Creation de compte
        if (isCustomCheckout) {
          try {
            // - le checkout as guest
            // - creation du compte
            await handleGuestCheckoutSessionCompleted(session)
          } catch (error) {
            logger.error(
              '‚ùå Erreur dans handleGuestCheckoutSessionCompleted:',
              error
            )
          }
        }

        // CAS : Paiement en plusieurs fois
        const isInstallmentCheckout =
          session.metadata?.source === 'installment_checkout'
        if (isInstallmentCheckout) {
          logger.info('üîß Traitement installment checkout')
          await handleInstallmentCheckoutSessionCompleted(session)
        }

        // En cas de besoin de traiter le workflow complet
        // si oui supprimer metadata.referenceId de la session.checkout pour eviter un double traitement par better auth
        //await handleFullCheckoutSessionCompleted(event)

        break
      }

      case 'customer.subscription.updated': {
        //https://github.com/better-auth/better-auth/issues/2087
        //https://github.com/better-auth/better-auth/blob/main/packages/stripe/src/hooks.ts#L42-L43
        logger.info('üîÑ [TEST] Traitement customer.subscription.updated')

        // TODO: Ici Better Auth g√®re automatiquement la mise √† jour
        logger.info(
          '‚úÖ [TEST] customer.subscription.updated trait√© par Better Auth'
        )
        break
      }

      case 'customer.subscription.deleted': {
        logger.info('üóëÔ∏è [TEST] Traitement customer.subscription.deleted')

        break
      }

      case 'invoice.paid':
        logger.info('üí∞ Invoice paid:', event.data.object.id)
        break

      case 'payment_intent.succeeded': {
        //1 pour les paiements unique seulement // PlanConst.LIFETIME
        logger.info(
          '‚úÖ Payment succeeded (payment_intent.succeeded):',
          event.data.object.id
        )

        break
      }

      default:
        logger.info('üìù Autre √©v√©nement Stripe:', event.type)
    }
  } catch (error) {
    logger.error('‚ùå Erreur dans onEvent Stripe:', error)
  }
}

/**
 * üéØ FONCTION PRINCIPALE : Orchestration du checkout session completed
 */
async function handleGuestCheckoutSessionCompleted(
  session: Stripe.Checkout.Session
): Promise<void> {
  const metadata = session.metadata || {}

  // 1Ô∏è‚É£ D√©tection du mode
  const isGuestCheckout = detectGuestCheckoutMode(metadata)

  if (!isGuestCheckout) {
    logger.info(
      '‚úÖ Mode utilisateur connect√© d√©tect√© - Better Auth va g√©rer automatiquement'
    )
    return // üöÄ Better Auth g√®re automatiquement
  }

  // 2Ô∏è‚É£ Validation des donn√©es
  const customerData = validateGuestCheckoutData(session, metadata)

  // 3Ô∏è‚É£ Cr√©ation user guest
  const finalUser = await createGuestUser(customerData)

  // 4Ô∏è‚É£ Mise √† jour subscription
  await updateSubscriptionWithUser(metadata.subscriptionId, finalUser) //metadata.subscriptionId the uuid in bd

  logger.info('üéâ Workflow guest checkout termin√© avec succ√®s!')
}

/**
 * 1Ô∏è‚É£ D√âTECTION : Mode guest checkout
 */
function detectGuestCheckoutMode(metadata: Record<string, string>): boolean {
  logger.info('üîç Analyse du type de checkout...')

  const referenceId = metadata.referenceId
  const guestCheckoutFlag = metadata.guest_checkout === 'true'

  const isGuestByReferenceId = referenceId === 'guest'
  const isGuestByFlag = guestCheckoutFlag
  const isGuestCheckout = isGuestByReferenceId || isGuestByFlag

  if (isGuestCheckout) {
    logger.info('üìã Mode guest d√©tect√© - traitement custom n√©cessaire')
  }

  return isGuestCheckout
}

/**
 * 2Ô∏è‚É£ VALIDATION : Donn√©es guest checkout
 */
function validateGuestCheckoutData(
  session: Stripe.Checkout.Session,
  metadata: Record<string, string>
): {
  customerEmail: string
  customerName?: string
  stripeCustomerId?: string
  subscriptionId: string
} {
  logger.info('üîç Validation des informations pour cr√©ation user guest...')

  // R√©cup√©ration des informations
  const customerEmail =
    metadata.customerEmail ?? session.customer_details?.email
  const customerName = session.customer_details?.name || undefined
  const stripeCustomerId = session.customer as string
  const subscriptionId = metadata.subscriptionId

  // Validations critiques
  if (!customerEmail) {
    logger.error('‚ùå Impossible de cr√©er user guest : email manquant')
    throw new Error('Email manquant pour guest checkout')
  }

  if (!subscriptionId) {
    logger.error(
      '‚ùå Impossible de mettre √† jour subscription : subscriptionId manquant'
    )
    throw new Error('SubscriptionId manquant pour guest checkout')
  }

  // Warning pour customer manquant (non bloquant)
  if (!stripeCustomerId) {
    logger.warn('‚ö†Ô∏è Customer Stripe manquant - sera cr√©√© automatiquement')
  }

  logger.info(
    '‚úÖ Validation r√©ussie - informations suffisantes pour cr√©er user guest'
  )

  return {
    customerEmail,
    customerName,
    stripeCustomerId,
    subscriptionId,
  }
}

/**
 * 3Ô∏è‚É£ CR√âATION : User guest (Stripe + BDD)
 */
async function createGuestUser(customerData: {
  customerEmail: string
  customerName?: string
  stripeCustomerId?: string
}): Promise<{
  id: string
  email: string
  stripeCustomerId: string
}> {
  logger.info('üîß Cr√©ation du user guest...')

  // 3.1 G√©rer customer Stripe
  const finalStripeCustomerId = await ensureStripeCustomer(customerData)

  // 3.2 G√©rer user BDD
  const finalUser = await ensureDatabaseUser(
    customerData.customerEmail,
    customerData.customerName,
    finalStripeCustomerId
  )

  return finalUser
}

/**
 * 3.1 STRIPE CUSTOMER : Cr√©er ou utiliser existant
 */
async function ensureStripeCustomer(customerData: {
  customerEmail: string
  customerName?: string
  stripeCustomerId?: string
}): Promise<string> {
  if (customerData.stripeCustomerId) {
    logger.info(
      '‚úÖ Customer Stripe existant utilis√©:',
      customerData.stripeCustomerId
    )
    return customerData.stripeCustomerId
  }

  logger.info('üîß Cr√©ation customer Stripe pour guest...')
  const stripeCustomer = await stripeClient.customers.create({
    email: customerData.customerEmail,
    name: customerData.customerName || undefined,
    metadata: {
      managed_by: 'webhook_guest_checkout',
      source: 'guest_checkout_webhook',
    },
  })

  logger.info('‚úÖ Customer Stripe cr√©√©:', stripeCustomer.id)
  return stripeCustomer.id
}

/**
 * 3.2 DATABASE USER : Cr√©er ou mettre √† jour existant
 */
async function ensureDatabaseUser(
  email: string,
  name: string | undefined,
  stripeCustomerId: string
): Promise<{
  id: string
  email: string
  stripeCustomerId: string
}> {
  logger.info('üîç V√©rification utilisateur existant...')

  const existingUser = await getUserByEmailDao(email)

  if (existingUser) {
    // Mettre √† jour stripeCustomerId si n√©cessaire
    if (existingUser.stripeCustomerId !== stripeCustomerId) {
      logger.warn(
        '‚ö†Ô∏è Mismatch stripeCustomerId d√©tect√© - mise √† jour n√©cessaire'
      )
      await updateUserSafeByUidDao(
        {
          email: existingUser.email,
          name: existingUser.name,
          stripeCustomerId,
        },
        existingUser.id
      )
    }

    return {
      id: existingUser.id,
      email: existingUser.email,
      stripeCustomerId,
    }
  }

  // Cr√©er nouvel utilisateur
  logger.info('üîß Cr√©ation nouvel utilisateur guest en BDD...')
  const userCreationResult = await createUserFromStripeService({
    email,
    stripeCustomerId,
    name: name || email?.split('@')[0] || 'Guest User',
  })

  if (!userCreationResult?.user) {
    throw new Error('√âchec de la cr√©ation utilisateur en BDD')
  }

  // Gestion des types de retour complexes
  const newUser =
    'user' in userCreationResult.user
      ? userCreationResult.user.user
      : userCreationResult.user

  return {
    id: newUser.id,
    email: newUser.email,
    stripeCustomerId,
  }
}

/**
 * 4Ô∏è‚É£ MISE √Ä JOUR : Subscription avec user cr√©√©
 */
async function updateSubscriptionWithUser(
  subscriptionId: string,
  user: {
    id: string
    email: string
    stripeCustomerId: string
  }
): Promise<void> {
  logger.info('üîÑ Mise √† jour du referenceId dans la subscription...')

  try {
    // üéØ Utiliser la config BILLING_MODE pour d√©terminer le bon referenceId
    const {referenceId} = await getBillingContext(user.id)

    const updatedSubscription = await updateSubscriptionForWebhookService({
      subscriptionId,
      referenceId,
      stripeCustomerId: user.stripeCustomerId,
    })

    logger.info('‚úÖ Subscription mise √† jour avec succ√®s:', {
      subscriptionId: updatedSubscription.id,
      newReferenceId: updatedSubscription.referenceId,
      stripeCustomerId: updatedSubscription.stripeCustomerId,
    })
  } catch (error) {
    logger.error('‚ùå Erreur lors de la mise √† jour de la subscription:', error)
    // Ne pas throw car l'utilisateur est cr√©√©, juste log l'erreur
  }
}

/**
 * üéØ FONCTION PRINCIPALE : Orchestration du checkout session completed
 * gestion complete sans passer par better-auth
 * (supprimer les metadata.referenceId pour ne pas passer par betterauth)
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
async function handleFullCheckoutSessionCompleted(event: Stripe.Event) {
  logger.info('üîß Traitement checkout session completed')
  const session = event.data.object as Stripe.Checkout.Session
  const metadata = session.metadata || {}
  const seats = metadata.seats ? parseInt(metadata.seats) : 1

  // R√©cup√©rer les infos n√©cessaires
  const customerEmail =
    metadata.customerEmail ?? session.customer_details?.email
  const stripeCustomerId = session.customer ?? undefined
  const plan = metadata.plan as SubscriptionPlan
  const isRecurring = metadata.isRecurring === 'true'
  const isYearly = metadata.interval === 'year'
  // const priceId = metadata.priceId as string
  // const payment_intent = session.payment_intent as string
  const subscriptionId = session.subscription as string
  const subscriptionUUID = metadata.subscriptionId

  logger.info('üîß session', session)
  logger.debug('üîß metadata:', metadata)
  logger.debug('üîß customerEmail', customerEmail)
  logger.debug('üîß stripeCustomerId', stripeCustomerId)
  logger.debug('üîß plan', plan)
  logger.debug('üîß isYearly', isYearly)
  logger.debug('üîß subscription', subscriptionId)
  logger.debug('üîß isRecurring', isRecurring)
  logger.debug('üîß subscriptionUUID', subscriptionUUID)

  // D√©tecter le type de traitement n√©cessaire
  const isGuestCheckout = !customerEmail || metadata.guest_checkout === 'true'
  const isInstallmentCheckout = metadata.source === 'installment_checkout'
  const isCustomCheckout = metadata.source === 'custom_checkout'

  logger.debug('üîß Type de checkout d√©tect√©:', {
    isGuestCheckout,
    isInstallmentCheckout,
    isCustomCheckout,
    source: metadata.source,
  })

  // √âTAPE 1: Gestion de l'utilisateur (guest ou existant)
  let finalCustomerId = stripeCustomerId as string
  let finalCustomerEmail = customerEmail

  if (isGuestCheckout) {
    logger.debug('üìã Traitement utilisateur guest')
    const email = session.customer_details?.email ?? ''
    const name = session.customer_details?.name ?? ''

    finalCustomerEmail = email

    // Cr√©er customer Stripe si n√©cessaire
    if (!finalCustomerId) {
      const customer = await stripeClient.customers.create({
        email: email,
        metadata: {
          managed_by: 'webhook_guest_checkout',
        },
      })
      finalCustomerId = customer.id
    }

    // Gestion de l'utilisateur en base
    const user = await getUserByEmailDao(email)
    if (user) {
      logger.debug('üîß Utilisateur existant trouv√©')
      if (finalCustomerId && user.stripeCustomerId !== finalCustomerId) {
        logger.warn('‚ö†Ô∏è Mismatch stripeCustomerId d√©tect√©')
        const subscription = await getSubscriptionByUserIdService(user.id)
        if (!subscription) {
          await updateUserSafeByUidDao(
            {
              email: user.email,
              name: user.name,
              stripeCustomerId: finalCustomerId,
            },
            user.id
          )
        }
      }
    } else {
      await createUserFromStripeService({
        email,
        stripeCustomerId: finalCustomerId,
        name: name ?? email?.split('@')[0] ?? '',
      })
      logger.info('‚úÖ Nouvel utilisateur cr√©√© pour guest checkout', email)
    }
  }

  // √âTAPE 2: Gestion de la subscription UNIQUEMENT pour vos cas sp√©cifiques
  if (
    isInstallmentCheckout &&
    finalCustomerEmail &&
    plan &&
    metadata.schedule_id
  ) {
    logger.debug('üóìÔ∏è Traitement subscription √©ch√©ancier')

    try {
      const numberOfPayments = parseInt(metadata.number_of_payments || '1')
      const currentDate = new Date()
      const endDate = new Date(currentDate)
      endDate.setMonth(endDate.getMonth() + numberOfPayments)

      if (subscriptionUUID) {
        await updateSubscriptionForWebhookService({
          subscriptionId: subscriptionUUID,
          referenceId: finalCustomerId,
          stripeCustomerId: finalCustomerId,
        })
      } else {
        await createSubscriptionFromStripeService(
          finalCustomerEmail,
          plan,
          isYearly,
          subscriptionId,
          finalCustomerId,
          seats,
          endDate
        )
      }

      logger.info(
        '‚úÖ Subscription √©ch√©ancier cr√©√©e avec succ√®s',
        finalCustomerEmail
      )
    } catch (error) {
      logger.error('‚ùå Erreur cr√©ation subscription √©ch√©ancier:', error)
    }
  } else if (isCustomCheckout && finalCustomerEmail && plan) {
    logger.debug('üîß Traitement subscription custom')

    try {
      if (subscriptionUUID) {
        // üéØ D√©terminer le bon referenceId selon BILLING_MODE
        const authenticatedUser = await getUserByEmailDao(finalCustomerEmail)
        if (authenticatedUser) {
          const {referenceId} = await getBillingContext(authenticatedUser.id)

          await updateSubscriptionForWebhookService({
            subscriptionId: subscriptionUUID,
            referenceId,
            stripeCustomerId: finalCustomerId,
          })
        }
      } else {
        await createSubscriptionFromStripeService(
          finalCustomerEmail,
          plan,
          isYearly,
          subscriptionId,
          finalCustomerId,
          seats
        )
        logger.info('‚úÖ Custom subscription cr√©√©e avec succ√®s')
      }
    } catch (error) {
      logger.error('‚ùå Erreur cr√©ation custom subscription:', error)
    }
  } else if (
    isGuestCheckout &&
    !isInstallmentCheckout &&
    !isCustomCheckout &&
    finalCustomerEmail &&
    plan
  ) {
    logger.info('üìã Traitement subscription guest simple')

    await createSubscriptionFromStripeService(
      finalCustomerEmail,
      plan,
      isYearly,
      subscriptionId,
      finalCustomerId
    )
    logger.info('‚úÖ Subscription guest simple cr√©√©e avec succ√®s')
  } else {
    logger.debug(
      "üìã Checkout Better Auth natif - trait√© automatiquement par l'API Better Auth"
    )
  }
}

// ===================================
// üéØ INSTALLMENT CHECKOUT : FONCTIONS SP√âCIALIS√âES
// ===================================

/**
 * üéØ FONCTION PRINCIPALE : Gestion des installment checkouts
 */
async function handleInstallmentCheckoutSessionCompleted(
  session: Stripe.Checkout.Session
): Promise<void> {
  logger.info('üóìÔ∏è Traitement installment checkout session completed')
  const metadata = session.metadata || {}
  console.log('üîßhandleInstallmentCheckoutSessionCompleted  metadata', metadata)
  // 1Ô∏è‚É£ Validation des donn√©es installment
  const installmentData = validateInstallmentCheckoutData(session, metadata)

  // 2Ô∏è‚É£ D√©tection du mode (guest ou authenticated)
  const isGuestCheckout = detectGuestCheckoutMode(metadata)

  // 3Ô∏è‚É£ Gestion utilisateur selon le mode
  let finalUser
  if (isGuestCheckout) {
    finalUser = await createGuestUser({
      customerEmail: installmentData.customerEmail,
      customerName: installmentData.customerName,
      stripeCustomerId: installmentData.stripeCustomerId,
    })
  } else {
    // Mode authenticated - r√©cup√©rer user existant
    finalUser = await getAuthenticatedUser(installmentData.customerEmail)
  }

  // 4Ô∏è‚É£ Cr√©ation subscription avec p√©riodes installment
  await createInstallmentSubscription(installmentData, finalUser)

  logger.info('üéâ Workflow installment checkout termin√© avec succ√®s!')
}

/**
 * 1Ô∏è‚É£ VALIDATION : Donn√©es installment checkout
 */
function validateInstallmentCheckoutData(
  session: Stripe.Checkout.Session,
  metadata: Record<string, string>
): {
  customerEmail: string
  customerName?: string
  stripeCustomerId?: string
  plan: string
  seats: number
  numberOfPayments: number
  scheduleId?: string
  stripeSubscriptionId?: string
} {
  logger.info('üîç Validation des donn√©es installment checkout...')

  // R√©cup√©ration des informations
  const customerEmail =
    metadata.customerEmail ?? session.customer_details?.email
  const customerName = session.customer_details?.name || undefined
  const stripeCustomerId = session.customer as string
  const plan = metadata.plan
  const seats = parseInt(metadata.seats || '1')
  const numberOfPayments = parseInt(metadata.number_of_payments || '1')
  const scheduleId = metadata.schedule_id
  const stripeSubscriptionId = session.subscription as string
  const isInstallmentCheckout = metadata.source === 'installment_checkout'

  // Validations critiques
  if (!customerEmail) {
    logger.error('‚ùå Email manquant pour installment checkout')
    throw new Error('Email manquant pour installment checkout')
  }

  if (!plan) {
    logger.error('‚ùå Plan manquant pour installment checkout')
    throw new Error('Plan manquant pour installment checkout')
  }

  if (!scheduleId) {
    logger.error('‚ùå Schedule ID manquant pour installment checkout')
    throw new Error('Schedule ID manquant pour installment checkout')
  }

  if (numberOfPayments < 2) {
    logger.error('‚ùå Nombre de paiements invalide pour installment')
    throw new Error('Nombre de paiements doit √™tre >= 2')
  }

  if (!isInstallmentCheckout) {
    logger.error('‚ùå Installment checkout non support√©')
    throw new Error('Installment checkout non support√©')
  }

  logger.info('‚úÖ Validation installment r√©ussie')

  return {
    customerEmail,
    customerName,
    stripeCustomerId,
    plan,
    seats,
    numberOfPayments,
    scheduleId,
    stripeSubscriptionId,
  }
}

/**
 * 2Ô∏è‚É£ UTILISATEUR AUTHENTIFI√â : R√©cup√©rer user existant
 */
async function getAuthenticatedUser(email: string): Promise<{
  id: string
  email: string
  stripeCustomerId: string
}> {
  logger.info('üîç R√©cup√©ration utilisateur authentifi√©...')

  const existingUser = await getUserByEmailDao(email)
  if (!existingUser) {
    throw new Error(`Utilisateur authentifi√© non trouv√©: ${email}`)
  }

  return {
    id: existingUser.id,
    email: existingUser.email,
    stripeCustomerId: existingUser.stripeCustomerId || '',
  }
}

/**
 * 3Ô∏è‚É£ CR√âATION SUBSCRIPTION : Avec p√©riodes installment
 */
async function createInstallmentSubscription(
  installmentData: {
    customerEmail: string
    plan: string
    seats: number
    numberOfPayments: number
    stripeSubscriptionId?: string
  },
  user: {
    id: string
    email: string
    stripeCustomerId: string
  }
): Promise<void> {
  logger.info('üóìÔ∏è Cr√©ation subscription installment...')

  try {
    // Calculer la date de fin bas√©e sur le nombre de paiements
    const currentDate = new Date()
    const endDate = new Date(currentDate)
    endDate.setMonth(endDate.getMonth() + installmentData.numberOfPayments)

    // Utiliser le service de cr√©ation subscription existant

    await createSubscriptionFromStripeService(
      installmentData.customerEmail,
      installmentData.plan as SubscriptionPlan, // Cast vers SubscriptionPlan
      false, // yearly = false pour installments
      installmentData.stripeSubscriptionId || '',
      user.stripeCustomerId,
      installmentData.seats,
      endDate
    )

    logger.info('‚úÖ Subscription installment cr√©√©e avec succ√®s:', {
      userEmail: installmentData.customerEmail,
      plan: installmentData.plan,
      seats: installmentData.seats,
      numberOfPayments: installmentData.numberOfPayments,
      endDate: endDate.toISOString(),
    })
  } catch (error) {
    logger.error(
      '‚ùå Erreur lors de la cr√©ation subscription installment:',
      error
    )
    throw error
  }
}
